// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ArgoCD.Client
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// RepositoryService operations.
    /// </summary>
    public partial interface IRepositoryService
    {
        /// <summary>
        /// ListRepositories gets a list of all configured repositories
        /// </summary>
        /// <param name='repo'>
        /// Repo URL for query.
        /// </param>
        /// <param name='forceRefresh'>
        /// Whether to force a cache refresh on repo's connection state.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RuntimeErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<V1alpha1RepositoryList>> ListRepositoriesWithHttpMessagesAsync(string repo = default(string), bool? forceRefresh = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// CreateRepository creates a new repository configuration
        /// </summary>
        /// <param name='body'>
        /// Repository definition
        /// </param>
        /// <param name='upsert'>
        /// Whether to create in upsert mode.
        /// </param>
        /// <param name='credsOnly'>
        /// Whether to operate on credential set instead of repository.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RuntimeErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<V1alpha1Repository>> CreateRepositoryWithHttpMessagesAsync(V1alpha1Repository body, bool? upsert = default(bool?), bool? credsOnly = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// UpdateRepository updates a repository configuration
        /// </summary>
        /// <param name='reporepo'>
        /// Repo contains the URL to the remote repository
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RuntimeErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<V1alpha1Repository>> UpdateRepositoryWithHttpMessagesAsync(string reporepo, V1alpha1Repository body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get returns a repository or its credentials
        /// </summary>
        /// <param name='repo'>
        /// Repo URL for query
        /// </param>
        /// <param name='forceRefresh'>
        /// Whether to force a cache refresh on repo's connection state.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RuntimeErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<V1alpha1Repository>> GetWithHttpMessagesAsync(string repo, bool? forceRefresh = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// DeleteRepository deletes a repository from the configuration
        /// </summary>
        /// <param name='repo'>
        /// Repo URL for query
        /// </param>
        /// <param name='forceRefresh'>
        /// Whether to force a cache refresh on repo's connection state.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RuntimeErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> DeleteRepositoryWithHttpMessagesAsync(string repo, bool? forceRefresh = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// ListApps returns list of apps in the repe
        /// </summary>
        /// <param name='repo'>
        /// </param>
        /// <param name='revision'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RuntimeErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<RepositoryRepoAppsResponse>> ListAppsWithHttpMessagesAsync(string repo, string revision = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// GetHelmCharts returns list of helm charts in the specified
        /// repository
        /// </summary>
        /// <param name='repo'>
        /// Repo URL for query
        /// </param>
        /// <param name='forceRefresh'>
        /// Whether to force a cache refresh on repo's connection state.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RuntimeErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<RepositoryHelmChartsResponse>> GetHelmChartsWithHttpMessagesAsync(string repo, bool? forceRefresh = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='repo'>
        /// Repo URL for query
        /// </param>
        /// <param name='forceRefresh'>
        /// Whether to force a cache refresh on repo's connection state.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RuntimeErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<RepositoryRefs>> ListRefsWithHttpMessagesAsync(string repo, bool? forceRefresh = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// ValidateAccess validates access to a repository with given
        /// parameters
        /// </summary>
        /// <param name='repo'>
        /// The URL to the repo
        /// </param>
        /// <param name='body'>
        /// The URL to the repo
        /// </param>
        /// <param name='username'>
        /// Username for accessing repo.
        /// </param>
        /// <param name='password'>
        /// Password for accessing repo.
        /// </param>
        /// <param name='sshPrivateKey'>
        /// Private key data for accessing SSH repository.
        /// </param>
        /// <param name='insecure'>
        /// Whether to skip certificate or host key validation.
        /// </param>
        /// <param name='tlsClientCertData'>
        /// TLS client cert data for accessing HTTPS repository.
        /// </param>
        /// <param name='tlsClientCertKey'>
        /// TLS client cert key for accessing HTTPS repository.
        /// </param>
        /// <param name='type'>
        /// The type of the repo.
        /// </param>
        /// <param name='name'>
        /// The name of the repo.
        /// </param>
        /// <param name='enableOci'>
        /// Whether helm-oci support should be enabled for this repo.
        /// </param>
        /// <param name='githubAppPrivateKey'>
        /// Github App Private Key PEM data.
        /// </param>
        /// <param name='githubAppID'>
        /// Github App ID of the app used to access the repo.
        /// </param>
        /// <param name='githubAppInstallationID'>
        /// Github App Installation ID of the installed GitHub App.
        /// </param>
        /// <param name='githubAppEnterpriseBaseUrl'>
        /// Github App Enterprise base url if empty will default to
        /// https://api.github.com.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RuntimeErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> ValidateAccessWithHttpMessagesAsync(string repo, string body, string username = default(string), string password = default(string), string sshPrivateKey = default(string), bool? insecure = default(bool?), string tlsClientCertData = default(string), string tlsClientCertKey = default(string), string type = default(string), string name = default(string), bool? enableOci = default(bool?), string githubAppPrivateKey = default(string), string githubAppID = default(string), string githubAppInstallationID = default(string), string githubAppEnterpriseBaseUrl = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// GetAppDetails returns application details by given path
        /// </summary>
        /// <param name='sourcerepoURL'>
        /// RepoURL is the URL to the repository (Git or Helm) that contains
        /// the application manifests
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="RuntimeErrorException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<RepositoryRepoAppDetailsResponse>> GetAppDetailsWithHttpMessagesAsync(string sourcerepoURL, RepositoryRepoAppDetailsQuery body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
