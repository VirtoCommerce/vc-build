// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ArgoCD.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CertificateService.
    /// </summary>
    public static partial class CertificateServiceExtensions
    {
            /// <summary>
            /// List all available repository certificates
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostNamePattern'>
            /// A file-glob pattern (not regular expression) the host name has to match.
            /// </param>
            /// <param name='certType'>
            /// The type of the certificate to match (ssh or https).
            /// </param>
            /// <param name='certSubType'>
            /// The sub type of the certificate to match (protocol dependent, usually only
            /// used for ssh certs).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RepositoryCertificateList> ListCertificatesAsync(this ICertificateService operations, string hostNamePattern = default(string), string certType = default(string), string certSubType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCertificatesWithHttpMessagesAsync(hostNamePattern, certType, certSubType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates repository certificates on the server
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// List of certificates to be created
            /// </param>
            /// <param name='upsert'>
            /// Whether to upsert already existing certificates.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RepositoryCertificateList> CreateCertificateAsync(this ICertificateService operations, V1alpha1RepositoryCertificateList body, bool? upsert = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCertificateWithHttpMessagesAsync(body, upsert, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the certificates that match the RepositoryCertificateQuery
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostNamePattern'>
            /// A file-glob pattern (not regular expression) the host name has to match.
            /// </param>
            /// <param name='certType'>
            /// The type of the certificate to match (ssh or https).
            /// </param>
            /// <param name='certSubType'>
            /// The sub type of the certificate to match (protocol dependent, usually only
            /// used for ssh certs).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RepositoryCertificateList> DeleteCertificateAsync(this ICertificateService operations, string hostNamePattern = default(string), string certType = default(string), string certSubType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateWithHttpMessagesAsync(hostNamePattern, certType, certSubType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
