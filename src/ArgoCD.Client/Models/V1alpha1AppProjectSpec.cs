// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ArgoCD.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// AppProjectSpec is the specification of an AppProject
    /// </summary>
    public partial class V1alpha1AppProjectSpec
    {
        /// <summary>
        /// Initializes a new instance of the V1alpha1AppProjectSpec class.
        /// </summary>
        public V1alpha1AppProjectSpec()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1alpha1AppProjectSpec class.
        /// </summary>
        /// <param name="clusterResourceBlacklist">ClusterResourceBlacklist
        /// contains list of blacklisted cluster level resources</param>
        /// <param name="clusterResourceWhitelist">ClusterResourceWhitelist
        /// contains list of whitelisted cluster level resources</param>
        /// <param name="description">Description contains optional project
        /// description</param>
        /// <param name="destinations">Destinations contains list of
        /// destinations available for deployment</param>
        /// <param name="namespaceResourceBlacklist">NamespaceResourceBlacklist
        /// contains list of blacklisted namespace level resources</param>
        /// <param name="namespaceResourceWhitelist">NamespaceResourceWhitelist
        /// contains list of whitelisted namespace level resources</param>
        /// <param name="roles">Roles are user defined RBAC roles associated
        /// with this project</param>
        /// <param name="signatureKeys">SignatureKeys contains a list of PGP
        /// key IDs that commits in Git must be signed with in order to be
        /// allowed for sync</param>
        /// <param name="sourceRepos">SourceRepos contains list of repository
        /// URLs which can be used for deployment</param>
        /// <param name="syncWindows">SyncWindows controls when syncs can be
        /// run for apps in this project</param>
        public V1alpha1AppProjectSpec(IList<V1GroupKind> clusterResourceBlacklist = default(IList<V1GroupKind>), IList<V1GroupKind> clusterResourceWhitelist = default(IList<V1GroupKind>), string description = default(string), IList<V1alpha1ApplicationDestination> destinations = default(IList<V1alpha1ApplicationDestination>), IList<V1GroupKind> namespaceResourceBlacklist = default(IList<V1GroupKind>), IList<V1GroupKind> namespaceResourceWhitelist = default(IList<V1GroupKind>), V1alpha1OrphanedResourcesMonitorSettings orphanedResources = default(V1alpha1OrphanedResourcesMonitorSettings), IList<V1alpha1ProjectRole> roles = default(IList<V1alpha1ProjectRole>), IList<V1alpha1SignatureKey> signatureKeys = default(IList<V1alpha1SignatureKey>), IList<string> sourceRepos = default(IList<string>), IList<V1alpha1SyncWindow> syncWindows = default(IList<V1alpha1SyncWindow>))
        {
            ClusterResourceBlacklist = clusterResourceBlacklist;
            ClusterResourceWhitelist = clusterResourceWhitelist;
            Description = description;
            Destinations = destinations;
            NamespaceResourceBlacklist = namespaceResourceBlacklist;
            NamespaceResourceWhitelist = namespaceResourceWhitelist;
            OrphanedResources = orphanedResources;
            Roles = roles;
            SignatureKeys = signatureKeys;
            SourceRepos = sourceRepos;
            SyncWindows = syncWindows;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets clusterResourceBlacklist contains list of blacklisted
        /// cluster level resources
        /// </summary>
        [JsonProperty(PropertyName = "clusterResourceBlacklist")]
        public IList<V1GroupKind> ClusterResourceBlacklist { get; set; }

        /// <summary>
        /// Gets or sets clusterResourceWhitelist contains list of whitelisted
        /// cluster level resources
        /// </summary>
        [JsonProperty(PropertyName = "clusterResourceWhitelist")]
        public IList<V1GroupKind> ClusterResourceWhitelist { get; set; }

        /// <summary>
        /// Gets or sets description contains optional project description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets destinations contains list of destinations available
        /// for deployment
        /// </summary>
        [JsonProperty(PropertyName = "destinations")]
        public IList<V1alpha1ApplicationDestination> Destinations { get; set; }

        /// <summary>
        /// Gets or sets namespaceResourceBlacklist contains list of
        /// blacklisted namespace level resources
        /// </summary>
        [JsonProperty(PropertyName = "namespaceResourceBlacklist")]
        public IList<V1GroupKind> NamespaceResourceBlacklist { get; set; }

        /// <summary>
        /// Gets or sets namespaceResourceWhitelist contains list of
        /// whitelisted namespace level resources
        /// </summary>
        [JsonProperty(PropertyName = "namespaceResourceWhitelist")]
        public IList<V1GroupKind> NamespaceResourceWhitelist { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "orphanedResources")]
        public V1alpha1OrphanedResourcesMonitorSettings OrphanedResources { get; set; }

        /// <summary>
        /// Gets or sets roles are user defined RBAC roles associated with this
        /// project
        /// </summary>
        [JsonProperty(PropertyName = "roles")]
        public IList<V1alpha1ProjectRole> Roles { get; set; }

        /// <summary>
        /// Gets or sets signatureKeys contains a list of PGP key IDs that
        /// commits in Git must be signed with in order to be allowed for sync
        /// </summary>
        [JsonProperty(PropertyName = "signatureKeys")]
        public IList<V1alpha1SignatureKey> SignatureKeys { get; set; }

        /// <summary>
        /// Gets or sets sourceRepos contains list of repository URLs which can
        /// be used for deployment
        /// </summary>
        [JsonProperty(PropertyName = "sourceRepos")]
        public IList<string> SourceRepos { get; set; }

        /// <summary>
        /// Gets or sets syncWindows controls when syncs can be run for apps in
        /// this project
        /// </summary>
        [JsonProperty(PropertyName = "syncWindows")]
        public IList<V1alpha1SyncWindow> SyncWindows { get; set; }

    }
}
