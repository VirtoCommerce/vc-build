// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ArgoCD.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RepositoryService.
    /// </summary>
    public static partial class RepositoryServiceExtensions
    {
            /// <summary>
            /// ListRepositories gets a list of all configured repositories
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repo'>
            /// Repo URL for query.
            /// </param>
            /// <param name='forceRefresh'>
            /// Whether to force a cache refresh on repo's connection state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RepositoryList> ListRepositoriesAsync(this IRepositoryService operations, string repo = default(string), bool? forceRefresh = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRepositoriesWithHttpMessagesAsync(repo, forceRefresh, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateRepository creates a new repository configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Repository definition
            /// </param>
            /// <param name='upsert'>
            /// Whether to create in upsert mode.
            /// </param>
            /// <param name='credsOnly'>
            /// Whether to operate on credential set instead of repository.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Repository> CreateRepositoryAsync(this IRepositoryService operations, V1alpha1Repository body, bool? upsert = default(bool?), bool? credsOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRepositoryWithHttpMessagesAsync(body, upsert, credsOnly, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UpdateRepository updates a repository configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reporepo'>
            /// Repo contains the URL to the remote repository
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Repository> UpdateRepositoryAsync(this IRepositoryService operations, string reporepo, V1alpha1Repository body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRepositoryWithHttpMessagesAsync(reporepo, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get returns a repository or its credentials
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repo'>
            /// Repo URL for query
            /// </param>
            /// <param name='forceRefresh'>
            /// Whether to force a cache refresh on repo's connection state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Repository> GetAsync(this IRepositoryService operations, string repo, bool? forceRefresh = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(repo, forceRefresh, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// DeleteRepository deletes a repository from the configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repo'>
            /// Repo URL for query
            /// </param>
            /// <param name='forceRefresh'>
            /// Whether to force a cache refresh on repo's connection state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteRepositoryAsync(this IRepositoryService operations, string repo, bool? forceRefresh = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRepositoryWithHttpMessagesAsync(repo, forceRefresh, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// ListApps returns list of apps in the repe
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repo'>
            /// </param>
            /// <param name='revision'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RepositoryRepoAppsResponse> ListAppsAsync(this IRepositoryService operations, string repo, string revision = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsWithHttpMessagesAsync(repo, revision, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetHelmCharts returns list of helm charts in the specified repository
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repo'>
            /// Repo URL for query
            /// </param>
            /// <param name='forceRefresh'>
            /// Whether to force a cache refresh on repo's connection state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RepositoryHelmChartsResponse> GetHelmChartsAsync(this IRepositoryService operations, string repo, bool? forceRefresh = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHelmChartsWithHttpMessagesAsync(repo, forceRefresh, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repo'>
            /// Repo URL for query
            /// </param>
            /// <param name='forceRefresh'>
            /// Whether to force a cache refresh on repo's connection state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RepositoryRefs> ListRefsAsync(this IRepositoryService operations, string repo, bool? forceRefresh = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRefsWithHttpMessagesAsync(repo, forceRefresh, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// ValidateAccess validates access to a repository with given parameters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='repo'>
            /// The URL to the repo
            /// </param>
            /// <param name='body'>
            /// The URL to the repo
            /// </param>
            /// <param name='username'>
            /// Username for accessing repo.
            /// </param>
            /// <param name='password'>
            /// Password for accessing repo.
            /// </param>
            /// <param name='sshPrivateKey'>
            /// Private key data for accessing SSH repository.
            /// </param>
            /// <param name='insecure'>
            /// Whether to skip certificate or host key validation.
            /// </param>
            /// <param name='tlsClientCertData'>
            /// TLS client cert data for accessing HTTPS repository.
            /// </param>
            /// <param name='tlsClientCertKey'>
            /// TLS client cert key for accessing HTTPS repository.
            /// </param>
            /// <param name='type'>
            /// The type of the repo.
            /// </param>
            /// <param name='name'>
            /// The name of the repo.
            /// </param>
            /// <param name='enableOci'>
            /// Whether helm-oci support should be enabled for this repo.
            /// </param>
            /// <param name='githubAppPrivateKey'>
            /// Github App Private Key PEM data.
            /// </param>
            /// <param name='githubAppID'>
            /// Github App ID of the app used to access the repo.
            /// </param>
            /// <param name='githubAppInstallationID'>
            /// Github App Installation ID of the installed GitHub App.
            /// </param>
            /// <param name='githubAppEnterpriseBaseUrl'>
            /// Github App Enterprise base url if empty will default to
            /// https://api.github.com.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ValidateAccessAsync(this IRepositoryService operations, string repo, string body, string username = default(string), string password = default(string), string sshPrivateKey = default(string), bool? insecure = default(bool?), string tlsClientCertData = default(string), string tlsClientCertKey = default(string), string type = default(string), string name = default(string), bool? enableOci = default(bool?), string githubAppPrivateKey = default(string), string githubAppID = default(string), string githubAppInstallationID = default(string), string githubAppEnterpriseBaseUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateAccessWithHttpMessagesAsync(repo, body, username, password, sshPrivateKey, insecure, tlsClientCertData, tlsClientCertKey, type, name, enableOci, githubAppPrivateKey, githubAppID, githubAppInstallationID, githubAppEnterpriseBaseUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetAppDetails returns application details by given path
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourcerepoURL'>
            /// RepoURL is the URL to the repository (Git or Helm) that contains the
            /// application manifests
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RepositoryRepoAppDetailsResponse> GetAppDetailsAsync(this IRepositoryService operations, string sourcerepoURL, RepositoryRepoAppDetailsQuery body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppDetailsWithHttpMessagesAsync(sourcerepoURL, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
