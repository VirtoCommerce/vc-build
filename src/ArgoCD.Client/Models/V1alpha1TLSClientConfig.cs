// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ArgoCD.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// TLSClientConfig contains settings to enable transport layer security
    /// </summary>
    public partial class V1alpha1TLSClientConfig
    {
        /// <summary>
        /// Initializes a new instance of the V1alpha1TLSClientConfig class.
        /// </summary>
        public V1alpha1TLSClientConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1alpha1TLSClientConfig class.
        /// </summary>
        /// <param name="caData">CAData holds PEM-encoded bytes (typically read
        /// from a root certificates bundle).
        /// CAData takes precedence over CAFile</param>
        /// <param name="certData">CertData holds PEM-encoded bytes (typically
        /// read from a client certificate file).
        /// CertData takes precedence over CertFile</param>
        /// <param name="insecure">Insecure specifies that the server should be
        /// accessed without verifying the TLS certificate. For testing
        /// only.</param>
        /// <param name="keyData">KeyData holds PEM-encoded bytes (typically
        /// read from a client certificate key file).
        /// KeyData takes precedence over KeyFile</param>
        /// <param name="serverName">ServerName is passed to the server for SNI
        /// and is used in the client to check server
        /// certificates against. If ServerName is empty, the hostname used to
        /// contact the
        /// server is used.</param>
        public V1alpha1TLSClientConfig(byte[] caData = default(byte[]), byte[] certData = default(byte[]), bool? insecure = default(bool?), byte[] keyData = default(byte[]), string serverName = default(string))
        {
            CaData = caData;
            CertData = certData;
            Insecure = insecure;
            KeyData = keyData;
            ServerName = serverName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets cAData holds PEM-encoded bytes (typically read from a
        /// root certificates bundle).
        /// CAData takes precedence over CAFile
        /// </summary>
        [JsonProperty(PropertyName = "caData")]
        public byte[] CaData { get; set; }

        /// <summary>
        /// Gets or sets certData holds PEM-encoded bytes (typically read from
        /// a client certificate file).
        /// CertData takes precedence over CertFile
        /// </summary>
        [JsonProperty(PropertyName = "certData")]
        public byte[] CertData { get; set; }

        /// <summary>
        /// Gets or sets insecure specifies that the server should be accessed
        /// without verifying the TLS certificate. For testing only.
        /// </summary>
        [JsonProperty(PropertyName = "insecure")]
        public bool? Insecure { get; set; }

        /// <summary>
        /// Gets or sets keyData holds PEM-encoded bytes (typically read from a
        /// client certificate key file).
        /// KeyData takes precedence over KeyFile
        /// </summary>
        [JsonProperty(PropertyName = "keyData")]
        public byte[] KeyData { get; set; }

        /// <summary>
        /// Gets or sets serverName is passed to the server for SNI and is used
        /// in the client to check server
        /// certificates against. If ServerName is empty, the hostname used to
        /// contact the
        /// server is used.
        /// </summary>
        [JsonProperty(PropertyName = "serverName")]
        public string ServerName { get; set; }

    }
}
