// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ArgoCD.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Repository is a repository holding application configurations
    /// </summary>
    public partial class V1alpha1Repository
    {
        /// <summary>
        /// Initializes a new instance of the V1alpha1Repository class.
        /// </summary>
        public V1alpha1Repository()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1alpha1Repository class.
        /// </summary>
        /// <param name="enableLfs">EnableLFS specifies whether git-lfs support
        /// should be enabled for this repo. Only valid for Git
        /// repositories.</param>
        /// <param name="enableOCI">EnableOCI specifies whether helm-oci
        /// support should be enabled for this repo</param>
        /// <param name="githubAppEnterpriseBaseUrl">GithubAppEnterpriseBaseURL
        /// specifies the base URL of GitHub Enterprise installation. If empty
        /// will default to https://api.github.com</param>
        /// <param name="githubAppID">GithubAppId specifies the ID of the
        /// GitHub app used to access the repo</param>
        /// <param name="githubAppInstallationID">GithubAppInstallationId
        /// specifies the installation ID of the GitHub App used to access the
        /// repo</param>
        /// <param name="githubAppPrivateKey">Github App Private Key PEM
        /// data</param>
        /// <param name="inheritedCreds">Whether credentials were inherited
        /// from a credential set</param>
        /// <param name="insecure">Insecure specifies whether the connection to
        /// the repository ignores any errors when verifying TLS certificates
        /// or SSH host keys</param>
        /// <param name="insecureIgnoreHostKey">InsecureIgnoreHostKey should
        /// not be used anymore, Insecure is favoured
        /// Used only for Git repos</param>
        /// <param name="name">Name specifies a name to be used for this repo.
        /// Only used with Helm repos</param>
        /// <param name="password">Password contains the password or PAT used
        /// for authenticating at the remote repository</param>
        /// <param name="repo">Repo contains the URL to the remote
        /// repository</param>
        /// <param name="sshPrivateKey">SSHPrivateKey contains the PEM data for
        /// authenticating at the repo server. Only used with Git
        /// repos.</param>
        /// <param name="tlsClientCertData">TLSClientCertData contains a
        /// certificate in PEM format for authenticating at the repo
        /// server</param>
        /// <param name="tlsClientCertKey">TLSClientCertKey contains a private
        /// key in PEM format for authenticating at the repo server</param>
        /// <param name="type">Type specifies the type of the repo. Can be
        /// either "git" or "helm. "git" is assumed if empty or absent.</param>
        /// <param name="username">Username contains the user name used for
        /// authenticating at the remote repository</param>
        public V1alpha1Repository(V1alpha1ConnectionState connectionState = default(V1alpha1ConnectionState), bool? enableLfs = default(bool?), bool? enableOCI = default(bool?), string githubAppEnterpriseBaseUrl = default(string), string githubAppID = default(string), string githubAppInstallationID = default(string), string githubAppPrivateKey = default(string), bool? inheritedCreds = default(bool?), bool? insecure = default(bool?), bool? insecureIgnoreHostKey = default(bool?), string name = default(string), string password = default(string), string repo = default(string), string sshPrivateKey = default(string), string tlsClientCertData = default(string), string tlsClientCertKey = default(string), string type = default(string), string username = default(string))
        {
            ConnectionState = connectionState;
            EnableLfs = enableLfs;
            EnableOCI = enableOCI;
            GithubAppEnterpriseBaseUrl = githubAppEnterpriseBaseUrl;
            GithubAppID = githubAppID;
            GithubAppInstallationID = githubAppInstallationID;
            GithubAppPrivateKey = githubAppPrivateKey;
            InheritedCreds = inheritedCreds;
            Insecure = insecure;
            InsecureIgnoreHostKey = insecureIgnoreHostKey;
            Name = name;
            Password = password;
            Repo = repo;
            SshPrivateKey = sshPrivateKey;
            TlsClientCertData = tlsClientCertData;
            TlsClientCertKey = tlsClientCertKey;
            Type = type;
            Username = username;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectionState")]
        public V1alpha1ConnectionState ConnectionState { get; set; }

        /// <summary>
        /// Gets or sets enableLFS specifies whether git-lfs support should be
        /// enabled for this repo. Only valid for Git repositories.
        /// </summary>
        [JsonProperty(PropertyName = "enableLfs")]
        public bool? EnableLfs { get; set; }

        /// <summary>
        /// Gets or sets enableOCI specifies whether helm-oci support should be
        /// enabled for this repo
        /// </summary>
        [JsonProperty(PropertyName = "enableOCI")]
        public bool? EnableOCI { get; set; }

        /// <summary>
        /// Gets or sets githubAppEnterpriseBaseURL specifies the base URL of
        /// GitHub Enterprise installation. If empty will default to
        /// https://api.github.com
        /// </summary>
        [JsonProperty(PropertyName = "githubAppEnterpriseBaseUrl")]
        public string GithubAppEnterpriseBaseUrl { get; set; }

        /// <summary>
        /// Gets or sets githubAppId specifies the ID of the GitHub app used to
        /// access the repo
        /// </summary>
        [JsonProperty(PropertyName = "githubAppID")]
        public string GithubAppID { get; set; }

        /// <summary>
        /// Gets or sets githubAppInstallationId specifies the installation ID
        /// of the GitHub App used to access the repo
        /// </summary>
        [JsonProperty(PropertyName = "githubAppInstallationID")]
        public string GithubAppInstallationID { get; set; }

        /// <summary>
        /// Gets or sets github App Private Key PEM data
        /// </summary>
        [JsonProperty(PropertyName = "githubAppPrivateKey")]
        public string GithubAppPrivateKey { get; set; }

        /// <summary>
        /// Gets or sets whether credentials were inherited from a credential
        /// set
        /// </summary>
        [JsonProperty(PropertyName = "inheritedCreds")]
        public bool? InheritedCreds { get; set; }

        /// <summary>
        /// Gets or sets insecure specifies whether the connection to the
        /// repository ignores any errors when verifying TLS certificates or
        /// SSH host keys
        /// </summary>
        [JsonProperty(PropertyName = "insecure")]
        public bool? Insecure { get; set; }

        /// <summary>
        /// Gets or sets insecureIgnoreHostKey should not be used anymore,
        /// Insecure is favoured
        /// Used only for Git repos
        /// </summary>
        [JsonProperty(PropertyName = "insecureIgnoreHostKey")]
        public bool? InsecureIgnoreHostKey { get; set; }

        /// <summary>
        /// Gets or sets name specifies a name to be used for this repo. Only
        /// used with Helm repos
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets password contains the password or PAT used for
        /// authenticating at the remote repository
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets repo contains the URL to the remote repository
        /// </summary>
        [JsonProperty(PropertyName = "repo")]
        public string Repo { get; set; }

        /// <summary>
        /// Gets or sets sSHPrivateKey contains the PEM data for authenticating
        /// at the repo server. Only used with Git repos.
        /// </summary>
        [JsonProperty(PropertyName = "sshPrivateKey")]
        public string SshPrivateKey { get; set; }

        /// <summary>
        /// Gets or sets tLSClientCertData contains a certificate in PEM format
        /// for authenticating at the repo server
        /// </summary>
        [JsonProperty(PropertyName = "tlsClientCertData")]
        public string TlsClientCertData { get; set; }

        /// <summary>
        /// Gets or sets tLSClientCertKey contains a private key in PEM format
        /// for authenticating at the repo server
        /// </summary>
        [JsonProperty(PropertyName = "tlsClientCertKey")]
        public string TlsClientCertKey { get; set; }

        /// <summary>
        /// Gets or sets type specifies the type of the repo. Can be either
        /// "git" or "helm. "git" is assumed if empty or absent.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets username contains the user name used for
        /// authenticating at the remote repository
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

    }
}
