// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ArgoCD.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ApplicationService.
    /// </summary>
    public static partial class ApplicationServiceExtensions
    {
            /// <summary>
            /// List returns list of applications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// the application's name.
            /// </param>
            /// <param name='refresh'>
            /// forces application reconciliation if set to true.
            /// </param>
            /// <param name='project'>
            /// the project names to restrict returned list applications.
            /// </param>
            /// <param name='resourceVersion'>
            /// when specified with a watch call, shows changes that occur after that
            /// particular version of a resource.
            /// </param>
            /// <param name='selector'>
            /// the selector to to restrict returned list to applications only with matched
            /// labels.
            /// </param>
            /// <param name='repo'>
            /// the repoURL to restrict returned list applications.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ApplicationList> ListAsync(this IApplicationService operations, string name = default(string), string refresh = default(string), IList<string> project = default(IList<string>), string resourceVersion = default(string), string selector = default(string), string repo = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(name, refresh, project, resourceVersion, selector, repo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create creates an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='upsert'>
            /// </param>
            /// <param name='validate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Application> CreateAsync(this IApplicationService operations, V1alpha1Application body, bool? upsert = default(bool?), bool? validate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(body, upsert, validate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update updates an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationmetadataname'>
            /// Name must be unique within a namespace. Is required when creating
            /// resources, although
            /// some resources may allow a client to request the generation of an
            /// appropriate name
            /// automatically. Name is primarily intended for creation idempotence and
            /// configuration
            /// definition.
            /// Cannot be updated.
            /// More info: http://kubernetes.io/docs/user-guide/identifiers#names
            /// +optional
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='validate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Application> UpdateAsync(this IApplicationService operations, string applicationmetadataname, V1alpha1Application body, bool? validate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(applicationmetadataname, body, validate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// ManagedResources returns list of managed resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationName'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='kind'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationManagedResourcesResponse> ManagedResourcesAsync(this IApplicationService operations, string applicationName, string namespaceParameter = default(string), string name = default(string), string version = default(string), string group = default(string), string kind = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ManagedResourcesWithHttpMessagesAsync(applicationName, namespaceParameter, name, version, group, kind, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// ResourceTree returns resource tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationName'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='kind'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ApplicationTree> ResourceTreeAsync(this IApplicationService operations, string applicationName, string namespaceParameter = default(string), string name = default(string), string version = default(string), string group = default(string), string kind = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResourceTreeWithHttpMessagesAsync(applicationName, namespaceParameter, name, version, group, kind, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get returns an application by name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// the application's name
            /// </param>
            /// <param name='refresh'>
            /// forces application reconciliation if set to true.
            /// </param>
            /// <param name='project'>
            /// the project names to restrict returned list applications.
            /// </param>
            /// <param name='resourceVersion'>
            /// when specified with a watch call, shows changes that occur after that
            /// particular version of a resource.
            /// </param>
            /// <param name='selector'>
            /// the selector to to restrict returned list to applications only with matched
            /// labels.
            /// </param>
            /// <param name='repo'>
            /// the repoURL to restrict returned list applications.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Application> GetAsync(this IApplicationService operations, string name, string refresh = default(string), IList<string> project = default(IList<string>), string resourceVersion = default(string), string selector = default(string), string repo = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(name, refresh, project, resourceVersion, selector, repo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete deletes an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cascade'>
            /// </param>
            /// <param name='propagationPolicy'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IApplicationService operations, string name, bool? cascade = default(bool?), string propagationPolicy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(name, cascade, propagationPolicy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch patch an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Application> PatchAsync(this IApplicationService operations, string name, ApplicationApplicationPatchRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(name, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// ListResourceEvents returns a list of event resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='resourceNamespace'>
            /// </param>
            /// <param name='resourceName'>
            /// </param>
            /// <param name='resourceUID'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1EventList> ListResourceEventsAsync(this IApplicationService operations, string name, string resourceNamespace = default(string), string resourceName = default(string), string resourceUID = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListResourceEventsWithHttpMessagesAsync(name, resourceNamespace, resourceName, resourceUID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// PodLogs returns stream of log entries for the specified pod. Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// </param>
            /// <param name='podName'>
            /// </param>
            /// <param name='container'>
            /// </param>
            /// <param name='sinceSeconds'>
            /// </param>
            /// <param name='sinceTimeseconds'>
            /// Represents seconds of UTC time since Unix epoch
            /// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
            /// 9999-12-31T23:59:59Z inclusive.
            /// </param>
            /// <param name='sinceTimenanos'>
            /// Non-negative fractions of a second at nanosecond resolution. Negative
            /// second values with fractions must still have non-negative nanos values
            /// that count forward in time. Must be from 0 to 999,999,999
            /// inclusive. This field may be limited in precision depending on context.
            /// </param>
            /// <param name='tailLines'>
            /// </param>
            /// <param name='follow'>
            /// </param>
            /// <param name='untilTime'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='kind'>
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='resourceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PodLogs2OKResponse> PodLogs2Async(this IApplicationService operations, string name, string namespaceParameter = default(string), string podName = default(string), string container = default(string), string sinceSeconds = default(string), string sinceTimeseconds = default(string), int? sinceTimenanos = default(int?), string tailLines = default(string), bool? follow = default(bool?), string untilTime = default(string), string filter = default(string), string kind = default(string), string group = default(string), string resourceName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PodLogs2WithHttpMessagesAsync(name, namespaceParameter, podName, container, sinceSeconds, sinceTimeseconds, sinceTimenanos, tailLines, follow, untilTime, filter, kind, group, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetManifests returns application manifests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='revision'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RepositoryManifestResponse> GetManifestsAsync(this IApplicationService operations, string name, string revision = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManifestsWithHttpMessagesAsync(name, revision, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TerminateOperation terminates the currently running operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TerminateOperationAsync(this IApplicationService operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TerminateOperationWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// PodLogs returns stream of log entries for the specified pod. Pod
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='podName'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// </param>
            /// <param name='container'>
            /// </param>
            /// <param name='sinceSeconds'>
            /// </param>
            /// <param name='sinceTimeseconds'>
            /// Represents seconds of UTC time since Unix epoch
            /// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
            /// 9999-12-31T23:59:59Z inclusive.
            /// </param>
            /// <param name='sinceTimenanos'>
            /// Non-negative fractions of a second at nanosecond resolution. Negative
            /// second values with fractions must still have non-negative nanos values
            /// that count forward in time. Must be from 0 to 999,999,999
            /// inclusive. This field may be limited in precision depending on context.
            /// </param>
            /// <param name='tailLines'>
            /// </param>
            /// <param name='follow'>
            /// </param>
            /// <param name='untilTime'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='kind'>
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='resourceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PodLogsOKResponse> PodLogsAsync(this IApplicationService operations, string name, string podName, string namespaceParameter = default(string), string container = default(string), string sinceSeconds = default(string), string sinceTimeseconds = default(string), int? sinceTimenanos = default(int?), string tailLines = default(string), bool? follow = default(bool?), string untilTime = default(string), string filter = default(string), string kind = default(string), string group = default(string), string resourceName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PodLogsWithHttpMessagesAsync(name, podName, namespaceParameter, container, sinceSeconds, sinceTimeseconds, sinceTimenanos, tailLines, follow, untilTime, filter, kind, group, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetResource returns single application resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// </param>
            /// <param name='resourceName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='kind'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationApplicationResourceResponse> GetResourceAsync(this IApplicationService operations, string name, string namespaceParameter = default(string), string resourceName = default(string), string version = default(string), string group = default(string), string kind = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetResourceWithHttpMessagesAsync(name, namespaceParameter, resourceName, version, group, kind, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// PatchResource patch single application resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// </param>
            /// <param name='resourceName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='kind'>
            /// </param>
            /// <param name='patchType'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationApplicationResourceResponse> PatchResourceAsync(this IApplicationService operations, string name, string body, string namespaceParameter = default(string), string resourceName = default(string), string version = default(string), string group = default(string), string kind = default(string), string patchType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchResourceWithHttpMessagesAsync(name, body, namespaceParameter, resourceName, version, group, kind, patchType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// DeleteResource deletes a single application resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// </param>
            /// <param name='resourceName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='kind'>
            /// </param>
            /// <param name='force'>
            /// </param>
            /// <param name='orphan'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteResourceAsync(this IApplicationService operations, string name, string namespaceParameter = default(string), string resourceName = default(string), string version = default(string), string group = default(string), string kind = default(string), bool? force = default(bool?), bool? orphan = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteResourceWithHttpMessagesAsync(name, namespaceParameter, resourceName, version, group, kind, force, orphan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// ListResourceActions returns list of resource actions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// </param>
            /// <param name='resourceName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='kind'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationResourceActionsListResponse> ListResourceActionsAsync(this IApplicationService operations, string name, string namespaceParameter = default(string), string resourceName = default(string), string version = default(string), string group = default(string), string kind = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListResourceActionsWithHttpMessagesAsync(name, namespaceParameter, resourceName, version, group, kind, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// RunResourceAction run resource action
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// </param>
            /// <param name='resourceName'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='kind'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RunResourceActionAsync(this IApplicationService operations, string name, string body, string namespaceParameter = default(string), string resourceName = default(string), string version = default(string), string group = default(string), string kind = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RunResourceActionWithHttpMessagesAsync(name, body, namespaceParameter, resourceName, version, group, kind, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the meta-data (author, date, tags, message) for a specific revision of
            /// the application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// the application's name
            /// </param>
            /// <param name='revision'>
            /// the revision of the app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1RevisionMetadata> RevisionMetadataAsync(this IApplicationService operations, string name, string revision, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevisionMetadataWithHttpMessagesAsync(name, revision, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Rollback syncs an application to its target state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Application> RollbackAsync(this IApplicationService operations, string name, ApplicationApplicationRollbackRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RollbackWithHttpMessagesAsync(name, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// UpdateSpec updates an application spec
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='validate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1ApplicationSpec> UpdateSpecAsync(this IApplicationService operations, string name, V1alpha1ApplicationSpec body, bool? validate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSpecWithHttpMessagesAsync(name, body, validate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sync syncs an application to its target state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<V1alpha1Application> SyncAsync(this IApplicationService operations, string name, ApplicationApplicationSyncRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SyncWithHttpMessagesAsync(name, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get returns sync windows of the application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationApplicationSyncWindowsResponse> GetApplicationSyncWindowsAsync(this IApplicationService operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationSyncWindowsWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Watch returns stream of application change events
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// the application's name.
            /// </param>
            /// <param name='refresh'>
            /// forces application reconciliation if set to true.
            /// </param>
            /// <param name='project'>
            /// the project names to restrict returned list applications.
            /// </param>
            /// <param name='resourceVersion'>
            /// when specified with a watch call, shows changes that occur after that
            /// particular version of a resource.
            /// </param>
            /// <param name='selector'>
            /// the selector to to restrict returned list to applications only with matched
            /// labels.
            /// </param>
            /// <param name='repo'>
            /// the repoURL to restrict returned list applications.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WatchOKResponse> WatchAsync(this IApplicationService operations, string name = default(string), string refresh = default(string), IList<string> project = default(IList<string>), string resourceVersion = default(string), string selector = default(string), string repo = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchWithHttpMessagesAsync(name, refresh, project, resourceVersion, selector, repo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Watch returns stream of application resource tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationName'>
            /// </param>
            /// <param name='namespaceParameter'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='group'>
            /// </param>
            /// <param name='kind'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WatchResourceTreeOKResponse> WatchResourceTreeAsync(this IApplicationService operations, string applicationName, string namespaceParameter = default(string), string name = default(string), string version = default(string), string group = default(string), string kind = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WatchResourceTreeWithHttpMessagesAsync(applicationName, namespaceParameter, name, version, group, kind, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
