// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ArgoCD.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// ObjectReference contains enough information to let you inspect or
    /// modify the referred object.
    /// ---
    /// New uses of this type are discouraged because of difficulty describing
    /// its usage when embedded in APIs.
    /// 1. Ignored fields.  It includes many fields which are not generally
    /// honored.  For instance, ResourceVersion and FieldPath are both very
    /// rarely valid in actual usage.
    /// 2. Invalid usage help.  It is impossible to add specific help for
    /// individual usage.  In most embedded usages, there are particular
    /// restrictions like, "must refer only to types A and B" or "UID not
    /// honored" or "name must be restricted".
    /// Those cannot be well described when embedded.
    /// 3. Inconsistent validation.  Because the usages are different, the
    /// validation rules are different by usage, which makes it hard for users
    /// to predict what will happen.
    /// 4. The fields are both imprecise and overly precise.  Kind is not a
    /// precise mapping to a URL. This can produce ambiguity
    /// during interpretation and require a REST mapping.  In most cases, the
    /// dependency is on the group,resource tuple
    /// and the version of the actual struct is irrelevant.
    /// 5. We cannot easily change it.  Because this type is embedded in many
    /// locations, updates to this type
    /// will affect numerous schemas.  Don't make new APIs embed an
    /// underspecified API type they do not control.
    /// Instead of using this type, create a locally provided and used type
    /// that is well-focused on your reference.
    /// For example, ServiceReferences for admission registration:
    /// https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
    /// .
    /// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
    /// </summary>
    public partial class V1ObjectReference
    {
        /// <summary>
        /// Initializes a new instance of the V1ObjectReference class.
        /// </summary>
        public V1ObjectReference()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1ObjectReference class.
        /// </summary>
        /// <param name="apiVersion">API version of the referent.
        /// +optional</param>
        /// <param name="fieldPath">If referring to a piece of an object
        /// instead of an entire object, this string
        /// should contain a valid JSON/Go field access statement, such as
        /// desiredState.manifest.containers[2].
        /// For example, if the object reference is to a container within a
        /// pod, this would take on a value like:
        /// "spec.containers{name}" (where "name" refers to the name of the
        /// container that triggered
        /// the event) or if no container name is specified
        /// "spec.containers[2]" (container with
        /// index 2 in this pod). This syntax is chosen only to have some
        /// well-defined way of
        /// referencing a part of an object.
        /// TODO: this design is not final and this field is subject to change
        /// in the future.
        /// +optional</param>
        /// <param name="kind">Kind of the referent.
        /// More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// +optional</param>
        /// <param name="name">Name of the referent.
        /// More info:
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        /// +optional</param>
        /// <param name="namespaceProperty">Namespace of the referent.
        /// More info:
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        /// +optional</param>
        /// <param name="resourceVersion">Specific resourceVersion to which
        /// this reference is made, if any.
        /// More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        /// +optional</param>
        /// <param name="uid">UID of the referent.
        /// More info:
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        /// +optional</param>
        public V1ObjectReference(string apiVersion = default(string), string fieldPath = default(string), string kind = default(string), string name = default(string), string namespaceProperty = default(string), string resourceVersion = default(string), string uid = default(string))
        {
            ApiVersion = apiVersion;
            FieldPath = fieldPath;
            Kind = kind;
            Name = name;
            NamespaceProperty = namespaceProperty;
            ResourceVersion = resourceVersion;
            Uid = uid;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets API version of the referent.
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets or sets if referring to a piece of an object instead of an
        /// entire object, this string
        /// should contain a valid JSON/Go field access statement, such as
        /// desiredState.manifest.containers[2].
        /// For example, if the object reference is to a container within a
        /// pod, this would take on a value like:
        /// "spec.containers{name}" (where "name" refers to the name of the
        /// container that triggered
        /// the event) or if no container name is specified
        /// "spec.containers[2]" (container with
        /// index 2 in this pod). This syntax is chosen only to have some
        /// well-defined way of
        /// referencing a part of an object.
        /// TODO: this design is not final and this field is subject to change
        /// in the future.
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "fieldPath")]
        public string FieldPath { get; set; }

        /// <summary>
        /// Gets or sets kind of the referent.
        /// More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets name of the referent.
        /// More info:
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets namespace of the referent.
        /// More info:
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "namespace")]
        public string NamespaceProperty { get; set; }

        /// <summary>
        /// Gets or sets specific resourceVersion to which this reference is
        /// made, if any.
        /// More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "resourceVersion")]
        public string ResourceVersion { get; set; }

        /// <summary>
        /// Gets or sets UID of the referent.
        /// More info:
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "uid")]
        public string Uid { get; set; }

    }
}
