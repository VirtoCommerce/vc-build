/*
 * VirtoCommerce.SaaS
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = VirtoCloud.Client.Client.FileParameter;
using OpenAPIDateConverter = VirtoCloud.Client.Client.OpenAPIDateConverter;

namespace VirtoCloud.Client.Model
{
    /// <summary>
    /// CloudEnvironment
    /// </summary>
    [DataContract(Name = "CloudEnvironment")]
    public partial class CloudEnvironment : IEquatable<CloudEnvironment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CloudEnvironment" /> class.
        /// </summary>
        /// <param name="labels">labels.</param>
        /// <param name="appProjectId">appProjectId.</param>
        /// <param name="metadataName">metadataName.</param>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="status">status.</param>
        /// <param name="syncStatus">syncStatus.</param>
        /// <param name="created">created.</param>
        /// <param name="updated">updated.</param>
        /// <param name="urls">urls.</param>
        /// <param name="helm">helm.</param>
        public CloudEnvironment(Dictionary<string, string> labels = default(Dictionary<string, string>), string appProjectId = default(string), string metadataName = default(string), string tenantId = default(string), string id = default(string), string name = default(string), string status = default(string), string syncStatus = default(string), DateTime created = default(DateTime), DateTime updated = default(DateTime), List<string> urls = default(List<string>), Helm helm = default(Helm))
        {
            this.Labels = labels;
            this.AppProjectId = appProjectId;
            this.MetadataName = metadataName;
            this.TenantId = tenantId;
            this.Id = id;
            this.Name = name;
            this.Status = status;
            this.SyncStatus = syncStatus;
            this.Created = created;
            this.Updated = updated;
            this.Urls = urls;
            this.Helm = helm;
        }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", EmitDefaultValue = true)]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// Gets or Sets AppProjectId
        /// </summary>
        [DataMember(Name = "appProjectId", EmitDefaultValue = true)]
        public string AppProjectId { get; set; }

        /// <summary>
        /// Gets or Sets MetadataName
        /// </summary>
        [DataMember(Name = "metadataName", EmitDefaultValue = true)]
        public string MetadataName { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets SyncStatus
        /// </summary>
        [DataMember(Name = "syncStatus", EmitDefaultValue = true)]
        public string SyncStatus { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", EmitDefaultValue = false)]
        public DateTime Updated { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name = "urls", EmitDefaultValue = true)]
        public List<string> Urls { get; set; }

        /// <summary>
        /// Gets or Sets Helm
        /// </summary>
        [DataMember(Name = "helm", EmitDefaultValue = true)]
        public Helm Helm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CloudEnvironment {\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  AppProjectId: ").Append(AppProjectId).Append("\n");
            sb.Append("  MetadataName: ").Append(MetadataName).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SyncStatus: ").Append(SyncStatus).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  Helm: ").Append(Helm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CloudEnvironment);
        }

        /// <summary>
        /// Returns true if CloudEnvironment instances are equal
        /// </summary>
        /// <param name="input">Instance of CloudEnvironment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CloudEnvironment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    input.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.AppProjectId == input.AppProjectId ||
                    (this.AppProjectId != null &&
                    this.AppProjectId.Equals(input.AppProjectId))
                ) && 
                (
                    this.MetadataName == input.MetadataName ||
                    (this.MetadataName != null &&
                    this.MetadataName.Equals(input.MetadataName))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SyncStatus == input.SyncStatus ||
                    (this.SyncStatus != null &&
                    this.SyncStatus.Equals(input.SyncStatus))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.Urls == input.Urls ||
                    this.Urls != null &&
                    input.Urls != null &&
                    this.Urls.SequenceEqual(input.Urls)
                ) && 
                (
                    this.Helm == input.Helm ||
                    (this.Helm != null &&
                    this.Helm.Equals(input.Helm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Labels != null)
                {
                    hashCode = (hashCode * 59) + this.Labels.GetHashCode();
                }
                if (this.AppProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.AppProjectId.GetHashCode();
                }
                if (this.MetadataName != null)
                {
                    hashCode = (hashCode * 59) + this.MetadataName.GetHashCode();
                }
                if (this.TenantId != null)
                {
                    hashCode = (hashCode * 59) + this.TenantId.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.SyncStatus != null)
                {
                    hashCode = (hashCode * 59) + this.SyncStatus.GetHashCode();
                }
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                if (this.Updated != null)
                {
                    hashCode = (hashCode * 59) + this.Updated.GetHashCode();
                }
                if (this.Urls != null)
                {
                    hashCode = (hashCode * 59) + this.Urls.GetHashCode();
                }
                if (this.Helm != null)
                {
                    hashCode = (hashCode * 59) + this.Helm.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
