// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ArgoCD.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Cluster is the definition of a cluster resource
    /// </summary>
    public partial class V1alpha1Cluster
    {
        /// <summary>
        /// Initializes a new instance of the V1alpha1Cluster class.
        /// </summary>
        public V1alpha1Cluster()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1alpha1Cluster class.
        /// </summary>
        /// <param name="name">Name of the cluster. If omitted, will use the
        /// server address</param>
        /// <param name="namespaces">Holds list of namespaces which are
        /// accessible in that cluster. Cluster level resources will be ignored
        /// if namespace list is not empty.</param>
        /// <param name="server">Server is the API server URL of the Kubernetes
        /// cluster</param>
        /// <param name="serverVersion">DEPRECATED: use Info.ServerVersion
        /// field instead.
        /// The server version</param>
        /// <param name="shard">Shard contains optional shard number.
        /// Calculated on the fly by the application controller if not
        /// specified.</param>
        public V1alpha1Cluster(V1alpha1ClusterConfig config = default(V1alpha1ClusterConfig), V1alpha1ConnectionState connectionState = default(V1alpha1ConnectionState), V1alpha1ClusterInfo info = default(V1alpha1ClusterInfo), string name = default(string), IList<string> namespaces = default(IList<string>), V1Time refreshRequestedAt = default(V1Time), string server = default(string), string serverVersion = default(string), string shard = default(string))
        {
            Config = config;
            ConnectionState = connectionState;
            Info = info;
            Name = name;
            Namespaces = namespaces;
            RefreshRequestedAt = refreshRequestedAt;
            Server = server;
            ServerVersion = serverVersion;
            Shard = shard;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "config")]
        public V1alpha1ClusterConfig Config { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "connectionState")]
        public V1alpha1ConnectionState ConnectionState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "info")]
        public V1alpha1ClusterInfo Info { get; set; }

        /// <summary>
        /// Gets or sets name of the cluster. If omitted, will use the server
        /// address
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets holds list of namespaces which are accessible in that
        /// cluster. Cluster level resources will be ignored if namespace list
        /// is not empty.
        /// </summary>
        [JsonProperty(PropertyName = "namespaces")]
        public IList<string> Namespaces { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "refreshRequestedAt")]
        public V1Time RefreshRequestedAt { get; set; }

        /// <summary>
        /// Gets or sets server is the API server URL of the Kubernetes cluster
        /// </summary>
        [JsonProperty(PropertyName = "server")]
        public string Server { get; set; }

        /// <summary>
        /// Gets or sets DEPRECATED: use Info.ServerVersion field instead.
        /// The server version
        /// </summary>
        [JsonProperty(PropertyName = "serverVersion")]
        public string ServerVersion { get; set; }

        /// <summary>
        /// Gets or sets shard contains optional shard number. Calculated on
        /// the fly by the application controller if not specified.
        /// </summary>
        [JsonProperty(PropertyName = "shard")]
        public string Shard { get; set; }

    }
}
