// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ArgoCD.Client
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// Description of all APIs
    /// </summary>
    public partial class ArgoCDClient : ServiceClient<ArgoCDClient>, IArgoCDClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Gets the IAccountService.
        /// </summary>
        public virtual IAccountService AccountService { get; private set; }

        /// <summary>
        /// Gets the IApplicationService.
        /// </summary>
        public virtual IApplicationService ApplicationService { get; private set; }

        /// <summary>
        /// Gets the ICertificateService.
        /// </summary>
        public virtual ICertificateService CertificateService { get; private set; }

        /// <summary>
        /// Gets the IClusterService.
        /// </summary>
        public virtual IClusterService ClusterService { get; private set; }

        /// <summary>
        /// Gets the IGPGKeyService.
        /// </summary>
        public virtual IGPGKeyService GPGKeyService { get; private set; }

        /// <summary>
        /// Gets the IProjectService.
        /// </summary>
        public virtual IProjectService ProjectService { get; private set; }

        /// <summary>
        /// Gets the IRepoCredsService.
        /// </summary>
        public virtual IRepoCredsService RepoCredsService { get; private set; }

        /// <summary>
        /// Gets the IRepositoryService.
        /// </summary>
        public virtual IRepositoryService RepositoryService { get; private set; }

        /// <summary>
        /// Gets the ISessionService.
        /// </summary>
        public virtual ISessionService SessionService { get; private set; }

        /// <summary>
        /// Gets the ISettingsService.
        /// </summary>
        public virtual ISettingsService SettingsService { get; private set; }

        /// <summary>
        /// Gets the IVersionService.
        /// </summary>
        public virtual IVersionService VersionService { get; private set; }

        /// <summary>
        /// Initializes a new instance of the ArgoCDClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling ArgoCDClient.Dispose(). False: will not dispose provided httpClient</param>
        public ArgoCDClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the ArgoCDClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public ArgoCDClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the ArgoCDClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public ArgoCDClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the ArgoCDClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ArgoCDClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the ArgoCDClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public ArgoCDClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            AccountService = new AccountService(this);
            ApplicationService = new ApplicationService(this);
            CertificateService = new CertificateService(this);
            ClusterService = new ClusterService(this);
            GPGKeyService = new GPGKeyService(this);
            ProjectService = new ProjectService(this);
            RepoCredsService = new RepoCredsService(this);
            RepositoryService = new RepositoryService(this);
            SessionService = new SessionService(this);
            SettingsService = new SettingsService(this);
            VersionService = new VersionService(this);
            BaseUri = new System.Uri("http://localhost");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}
