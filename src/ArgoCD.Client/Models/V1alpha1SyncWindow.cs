// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ArgoCD.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// SyncWindow contains the kind, time, duration and attributes that are
    /// used to assign the syncWindows to apps
    /// </summary>
    public partial class V1alpha1SyncWindow
    {
        /// <summary>
        /// Initializes a new instance of the V1alpha1SyncWindow class.
        /// </summary>
        public V1alpha1SyncWindow()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1alpha1SyncWindow class.
        /// </summary>
        /// <param name="applications">Applications contains a list of
        /// applications that the window will apply to</param>
        /// <param name="clusters">Clusters contains a list of clusters that
        /// the window will apply to</param>
        /// <param name="duration">Duration is the amount of time the sync
        /// window will be open</param>
        /// <param name="kind">Kind defines if the window allows or blocks
        /// syncs</param>
        /// <param name="manualSync">ManualSync enables manual syncs when they
        /// would otherwise be blocked</param>
        /// <param name="namespaces">Namespaces contains a list of namespaces
        /// that the window will apply to</param>
        /// <param name="schedule">Schedule is the time the window will begin,
        /// specified in cron format</param>
        public V1alpha1SyncWindow(IList<string> applications = default(IList<string>), IList<string> clusters = default(IList<string>), string duration = default(string), string kind = default(string), bool? manualSync = default(bool?), IList<string> namespaces = default(IList<string>), string schedule = default(string))
        {
            Applications = applications;
            Clusters = clusters;
            Duration = duration;
            Kind = kind;
            ManualSync = manualSync;
            Namespaces = namespaces;
            Schedule = schedule;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets applications contains a list of applications that the
        /// window will apply to
        /// </summary>
        [JsonProperty(PropertyName = "applications")]
        public IList<string> Applications { get; set; }

        /// <summary>
        /// Gets or sets clusters contains a list of clusters that the window
        /// will apply to
        /// </summary>
        [JsonProperty(PropertyName = "clusters")]
        public IList<string> Clusters { get; set; }

        /// <summary>
        /// Gets or sets duration is the amount of time the sync window will be
        /// open
        /// </summary>
        [JsonProperty(PropertyName = "duration")]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or sets kind defines if the window allows or blocks syncs
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets manualSync enables manual syncs when they would
        /// otherwise be blocked
        /// </summary>
        [JsonProperty(PropertyName = "manualSync")]
        public bool? ManualSync { get; set; }

        /// <summary>
        /// Gets or sets namespaces contains a list of namespaces that the
        /// window will apply to
        /// </summary>
        [JsonProperty(PropertyName = "namespaces")]
        public IList<string> Namespaces { get; set; }

        /// <summary>
        /// Gets or sets schedule is the time the window will begin, specified
        /// in cron format
        /// </summary>
        [JsonProperty(PropertyName = "schedule")]
        public string Schedule { get; set; }

    }
}
