// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ArgoCD.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Event is a report of an event somewhere in the cluster.  Events
    /// have a limited retention time and triggers and messages may evolve
    /// with time.  Event consumers should not rely on the timing of an event
    /// with a given Reason reflecting a consistent underlying trigger, or the
    /// continued existence of events with that Reason.  Events should be
    /// treated as informative, best-effort, supplemental data.
    /// </summary>
    public partial class V1Event
    {
        /// <summary>
        /// Initializes a new instance of the V1Event class.
        /// </summary>
        public V1Event()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1Event class.
        /// </summary>
        /// <param name="action">What action was taken/failed regarding to the
        /// Regarding object.
        /// +optional</param>
        /// <param name="count">The number of times this event has occurred.
        /// +optional</param>
        /// <param name="message">A human-readable description of the status of
        /// this operation.
        /// TODO: decide on maximum length.
        /// +optional</param>
        /// <param name="reason">This should be a short, machine understandable
        /// string that gives the reason
        /// for the transition into the object's current status.
        /// TODO: provide exact specification for format.
        /// +optional</param>
        /// <param name="reportingComponent">Name of the controller that
        /// emitted this Event, e.g. `kubernetes.io/kubelet`.
        /// +optional</param>
        /// <param name="reportingInstance">ID of the controller instance, e.g.
        /// `kubelet-xyzf`.
        /// +optional</param>
        /// <param name="type">Type of this event (Normal, Warning), new types
        /// could be added in the future
        /// +optional</param>
        public V1Event(string action = default(string), int? count = default(int?), V1MicroTime eventTime = default(V1MicroTime), V1Time firstTimestamp = default(V1Time), V1ObjectReference involvedObject = default(V1ObjectReference), V1Time lastTimestamp = default(V1Time), string message = default(string), V1ObjectMeta metadata = default(V1ObjectMeta), string reason = default(string), V1ObjectReference related = default(V1ObjectReference), string reportingComponent = default(string), string reportingInstance = default(string), V1EventSeries series = default(V1EventSeries), V1EventSource source = default(V1EventSource), string type = default(string))
        {
            Action = action;
            Count = count;
            EventTime = eventTime;
            FirstTimestamp = firstTimestamp;
            InvolvedObject = involvedObject;
            LastTimestamp = lastTimestamp;
            Message = message;
            Metadata = metadata;
            Reason = reason;
            Related = related;
            ReportingComponent = reportingComponent;
            ReportingInstance = reportingInstance;
            Series = series;
            Source = source;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets what action was taken/failed regarding to the
        /// Regarding object.
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "action")]
        public string Action { get; set; }

        /// <summary>
        /// Gets or sets the number of times this event has occurred.
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "eventTime")]
        public V1MicroTime EventTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstTimestamp")]
        public V1Time FirstTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "involvedObject")]
        public V1ObjectReference InvolvedObject { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastTimestamp")]
        public V1Time LastTimestamp { get; set; }

        /// <summary>
        /// Gets or sets a human-readable description of the status of this
        /// operation.
        /// TODO: decide on maximum length.
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public V1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// Gets or sets this should be a short, machine understandable string
        /// that gives the reason
        /// for the transition into the object's current status.
        /// TODO: provide exact specification for format.
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "related")]
        public V1ObjectReference Related { get; set; }

        /// <summary>
        /// Gets or sets name of the controller that emitted this Event, e.g.
        /// `kubernetes.io/kubelet`.
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "reportingComponent")]
        public string ReportingComponent { get; set; }

        /// <summary>
        /// Gets or sets ID of the controller instance, e.g. `kubelet-xyzf`.
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "reportingInstance")]
        public string ReportingInstance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "series")]
        public V1EventSeries Series { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public V1EventSource Source { get; set; }

        /// <summary>
        /// Gets or sets type of this event (Normal, Warning), new types could
        /// be added in the future
        /// +optional
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

    }
}
